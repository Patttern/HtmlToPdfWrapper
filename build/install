#!/bin/sh

#==================================================
# Отладка
#==================================================

DEBUG=0

#==================================================
# MAJOR и MINOR версии библиотеки
#==================================================

PKGMAJOR=1
PKGMINOR=0

#==================================================
# Конфигурация
#==================================================

MAINTAINER='Egor Babenko <patttern@gmail.com>'
PKGNAME='libhtmltopdfwrapper'
PKGDATEBUILD=`date +%Y%m%d`
PRJMAJOR_LABEL='VERSION_MAJOR'
PRJMINOR_LABEL='VERSION_MINOR'
PRJBUILD_LABEL='VERSION_BUILD'
PKGARCH='amd64'
LIBNAME='libHtmlToPdfWrapper'

CURRDIR=$PWD
ROOTDIR=${CURRDIR}/..
BUILDDIR=${CURRDIR}/build
SOURCE=${CURRDIR}/src
LIBS=${CURRDIR}/libs
PACKAGES=${CURRDIR}/packages
PROJECT_FILE=${CURRDIR}/HtmlToPdfWrapper.pro
ROOTPKGDIR=${CURRDIR}/${PKGNAME}
DEBIANDIR=${ROOTPKGDIR}/DEBIAN
TARGETDIR=${ROOTPKGDIR}/usr/lib

umask 022

#==================================================
# Функции
#==================================================

# Вывод разделительной строки
_line () {
  printf %50s | tr ' ' '='
  echo
}

# Проверка операционной системы
_check_os () {
  OS=`lsb_release -si | tr [:upper:] [:lower:]`
  case $OS in
    debian | \
    ubuntu )
       isLinux=1
       OSFAMILY='debian'
       PACKAGEMANAGER='apt-get'
       INSTALLCMD='install'
       REMOVECMD='-y purge'
       ;;
    redhat | \
    centos )
       isLinux=1
       OSFAMILY='redhat'
       PACKAGEMANAGER='yum'
       INSTALLCMD='install'
       REMOVECMD='-y erase'
       ;;
  esac
}

# Проверка доступа из-под суперпользователя
_check_root () {
  if [ "$(id -u)" != '0' ]; then
    sudo_match='sudo '
  else
    sudo_match=''
  fi
}

# Подготовка к установке: установка зависимых библиотек и программ, создание директорий
_preinstall () {
  _line
  echo "Установка программ, необходимых для компиляции..."
  _line

  REQUIRED_PACKAGES='oracle-java8-installer
                     oracle-java8-set-default
                     qt5-qmake
                     qt5-default
                     libqt5network5
                     libqt5svg5-dev
                     libqt5webkit5-dev
                     libqt5xmlpatterns5-dev
                     libqt5printsupport5
                     alien'

  for rp in ${REQUIRED_PACKAGES}; do
    reqpkg=`dpkg -l | grep ${rp}`
    if [ "${reqpkg}0" = "0" ]; then
      _line
      echo "Установка ${rp}..."
      _line

      if [ ${rp} = "oracle-java8-installer" ]; then
        ${sudo_match}${PACKAGEMANAGER} ${INSTALLCMD} python-software-properties -y

        if [ ! -e /etc/apt/sources.list.d/webupd8team-java.list ]; then
          echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main # Oracle JDK8\ndeb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main # Oracle JDK8 Source" \
            | ${sudo_match}tee /etc/apt/sources.list.d/webupd8team-java.list
          ${sudo_match}apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
          ${sudo_match}${PACKAGEMANAGER} update
        fi

        echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true \
          | ${sudo_match}/usr/bin/debconf-set-selections
      fi

      ${sudo_match}${PACKAGEMANAGER} ${INSTALLCMD} ${rp} -y
    fi
  done

  mkdir -p ${BUILDDIR} ${LIBS} ${PACKAGES}
}

# Проверка и установка версии библиотеки
_check_version () {
  RESETBUILD=0

  PRJMAJOR_STRING=`cat ${PROJECT_FILE} | awk "/^${PRJMAJOR_LABEL}/ {print}"`
  PRJMAJOR=`echo ${PRJMAJOR_STRING} | awk '{print($3)}'`
  if [ "$PRJMAJOR" != "$PKGMAJOR" ]; then
    sed -i "s/${PRJMAJOR_STRING}/${PRJMAJOR_LABEL} = ${PKGMAJOR}/" ${PROJECT_FILE}
    RESETBUILD=1
  fi

  PRJMINOR_STRING=`cat ${PROJECT_FILE} | awk "/^${PRJMINOR_LABEL}/ {print}"`
  PRJMINOR=`echo ${PRJMINOR_STRING} | awk '{print($3)}'`
  if [ "$PRJMINOR" != "$PKGMINOR" ]; then
    sed -i "s/${PRJMINOR_STRING}/${PRJMINOR_LABEL} = ${PKGMINOR}/" ${PROJECT_FILE}
    RESETBUILD=1
  fi

  PRJBUILD_STRING=`cat ${PROJECT_FILE} | awk "/^${PRJBUILD_LABEL}/ {print}"`
  # Если изменилась MAJOR или MINOR версия библиотеки ...
  if [ "${RESETBUILD}" = "1" ]; then
    # ... сбрасываем BUILD версию до 0
    PKGBUILD=0
  # Иначе ...
  else
    # ... инкремент BUILD версии на 1
    PRJBUILD=`echo ${PRJBUILD_STRING} | awk '{print($3)}'`
    PKGBUILD=`expr $PRJBUILD + 1`
  fi
  sed -i "s/${PRJBUILD_STRING}/${PRJBUILD_LABEL} = ${PKGBUILD}/" ${PROJECT_FILE}

  PKGRELEASE="${PKGMAJOR}.${PKGMINOR}.${PKGBUILD}"
}

# Сборка библиотеки
_build () {
  _check_version

  # Определяем JAVA_HOME
  JAVAHOMEPATH=`echo $JAVA_HOME`
  if [ "${JAVAHOMEPATH}0" = "0" ]; then
    export JAVA_HOME="$(update-alternatives --query java | grep 'Value: ' | grep -o '/.*/jre' | sed 's/\/jre//')"
  fi

  # Компилируем Java класс
  cd ${ROOTDIR}
  ./compile

  _line
  echo "Сборка библиотеки..."
  _line
  cd ${BUILDDIR}
  QMAKE_EXEC=`which qmake`
  echo ">>> " ${QMAKE_EXEC} ${PROJECT_FILE} -r -spec linux-g++
  ${QMAKE_EXEC} ${PROJECT_FILE} -r -spec linux-g++
  echo ">>> " make clean install
  make clean install
}

# Сборка Debian пакета
_package_deb () {
  _line
  echo "Создание Debian пакета..."
  _line

  mkdir -p ${DEBIANDIR} ${TARGETDIR}

  CONTENT="Package: ${PKGNAME}\nPriority: optional\nSection: libs\nMaintainer: ${MAINTAINER}\nArchitecture: ${PKGARCH}\nVersion: ${PKGRELEASE}-${PKGDATEBUILD}\nDescription: HtmlToPdf Wrapper library\n HtmlToPdf wrapper library with WebKit for using JNI (JAVA).\n"

  echo ${CONTENT} > ${DEBIANDIR}/control

  cp ${LIBS}/${PKGRELEASE}/${LIBNAME}.so.${PKGRELEASE} ${TARGETDIR}
  cd ${TARGETDIR}
  ln -s ${LIBNAME}.so.${PKGRELEASE} ${LIBNAME}.so.${PKGMAJOR}.${PKGMINOR}
  ln -s ${LIBNAME}.so.${PKGRELEASE} ${LIBNAME}.so.${PKGMAJOR}
  ln -s ${LIBNAME}.so.${PKGRELEASE} ${LIBNAME}.so

  cd ${ROOTPKGDIR}
  find usr -xtype f -exec md5sum {} >> ${DEBIANDIR}/md5sums \;

  cp ${CURRDIR}/../LICENSE ${DEBIANDIR}/copyright

  cd ${CURRDIR}
  echo ">>> " fakeroot dpkg-deb --build ${PKGNAME}
  fakeroot dpkg-deb --build ${PKGNAME}
  mv ${PKGNAME}.deb ${PACKAGES}/${PKGNAME}_${PKGRELEASE}-${PKGDATEBUILD}_${PKGARCH}.deb

  if [ ${DEBUG} = "0" ]; then
    rm -rf ${ROOTPKGDIR}
  fi
}

# Сборка Red Hat пакета
_package_rpm () {
  _line
  echo "Создание Red Hat пакета..."
  _line

  cd ${PACKAGES}
  echo ">>> " fakeroot alien -k -r ${PKGNAME}_${PKGRELEASE}-${PKGDATEBUILD}_${PKGARCH}.deb
  fakeroot alien -k -r ${PKGNAME}_${PKGRELEASE}-${PKGDATEBUILD}_${PKGARCH}.deb
}

# Сборка пакетов
_package () {
  _line
  echo "Создание пакетов..."
  _line

  _package_deb
  _package_rpm
}

# Удаление временных и спомогательных директорий и файлов
_clean () {
  _line
  echo "Зачистка мусора..."
  _line

  if [ ${DEBUG} = "0" ]; then
    rm -rf ${BUILDDIR}
  fi
}

# Установка
_install () {
  _check_root
  _preinstall
  _build
  _package
  _clean
}

#==================================================
# Основная часть
#==================================================

_check_os

if [ ${OSFAMILY} = 'debian' ]; then
  _install
  exit 0
else
  _line
  echo "Данный установщик предназначен для linux-систем семейства DEBIAN. Выход."
  _line
  exit 1
fi

